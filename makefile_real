# 
# Config vars
# 
UNAME_S := $(shell uname -s)

# import platform-specific configs
ifeq ($(UNAME_S),Linux)
include configs/linux_make_config
endif

ifeq ($(UNAME_S),Darwin)
include configs/mac_make_config
endif

ifeq ($(OS),Windows_NT)
include configs/win_make_config
endif

# Extra includes
INCLUDES :=

# Directories to not have in include path
INCLUDE_FILTER :=

# Directories/files to exclude from source
SRC_FILTER := 

# Libs to link and paths to link
LINKER_SEARCH_DIRS :=
PRE_LINK_LIBRARIES :=
POST_LINK_LIBRARIES :=

# Extra defines
DEFINES := 

# Extra compiler flags
COMPILER_FLAGS :=
LINKER_FLAGS :=


# 
# Build stuff
# Feel free to edit but it all works already
# 
SRC_DIR := src
OBJ_DIR := src
TMP_FILTER := $(SRC_FILTER) #$(shell printf " -path %s -o" $(SRC_FILTER)) -path ..

rwildcard=$(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))
rwildcard_withexclude=$(filter-out $(3),$(call rwildcard,$(1:=/*),$(2:=/*)))

ifeq (TMP_FILTER,)
S_SRC_FILES := $(call rwildcard_withexclude,$(SRC_DIR),*.s,$(TMP_FILTER))
C_SRC_FILES := $(call rwildcard_withexclude,$(SRC_DIR),*.c,$(TMP_FILTER))
CC_SRC_FILES := $(call rwildcard_withexclude,$(SRC_DIR),*.cc,$(TMP_FILTER))
CPP_SRC_FILES := $(call rwildcard_withexclude,$(SRC_DIR),*.cpp,$(TMP_FILTER))
else
S_SRC_FILES := $(call rwildcard,$(SRC_DIR),*.s)
C_SRC_FILES := $(call rwildcard,$(SRC_DIR),*.c)
CC_SRC_FILES := $(call rwildcard,$(SRC_DIR),*.cc)
CPP_SRC_FILES := $(call rwildcard,$(SRC_DIR),*.cpp)
endif

S_OBJ_FILES := $(filter %.o, $(patsubst $(SRC_DIR)/%.s,$(OBJ_DIR)/%.o,$(C_SRC_FILES)))
C_OBJ_FILES := $(filter %.o, $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(C_SRC_FILES)))
CC_OBJ_FILES := $(filter %.o, $(patsubst $(SRC_DIR)/%.cc,$(OBJ_DIR)/%.o,$(CC_SRC_FILES)))
CPP_OBJ_FILES := $(filter %.o, $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(CPP_SRC_FILES)))
OBJ_FILES = $(C_OBJ_FILES) $(CC_OBJ_FILES) $(CPP_OBJ_FILES)

#?
#? Disabled the precompiled headers until they can be used consistently.
#?
#? H_SRC_FILES := $(shell find $(SRC_DIR)/ -type d \( $(TMP_FILTER) \) -prune -o -type f -name '*.h')
#? HH_SRC_FILES := $(shell find $(SRC_DIR)/ -type d \( $(TMP_FILTER) \) -prune -o -type f -name '*.hh')
#? HPP_SRC_FILES := $(shell find $(SRC_DIR)/ -type d \( $(TMP_FILTER) \) -prune -o -type f -name '*.hpp')
#? H_PCH_FILES := $(filter %.pch, $(patsubst $(SRC_DIR)/%.h,$(OBJ_DIR)/%.h.gch,$(H_SRC_FILES)))
#? HH_PCH_FILES := $(filter %.pch, $(patsubst $(SRC_DIR)/%.hh,$(OBJ_DIR)/%.hh.gch,$(HH_SRC_FILES)))
#? HPP_PCH_FILES := $(filter %.pch, $(patsubst $(SRC_DIR)/%.hpp,$(OBJ_DIR)/%.hpp.gch,$(HPP_SRC_FILES)))
#? PCH_FILES = $(H_PCH_FILES) $(HH_PCH_FILES) $(HPP_PCH_FILES)
#? PCH_INCLUDES = $(filter -include-pch %.pch, $(PCH_FILES))
#? includes := $(includes) $(PCH_INCLUDES)

ifeq ($(OS),Windows_NT)
INCLUDE_DIRS = $(filter-out $(INCLUDE_FILTER) -I./,$(addprefix -I,$(sort $(dir $(shell cmd /c dir src /AD /b)))) $(addprefix -I,$(sort $(dir $(shell cmd /c dir include /AD /b))))) $(INCLUDES) -Isrc -Iinclude -Iinclude\box2d
else
INCLUDE_DIRS = $(filter-out $(INCLUDE_FILTER),$(addprefix -I,$(sort $(dir $(shell find src/ -type d)))) $(addprefix -I,$(sort $(dir $(shell find include/ -type d))))) $(INCLUDES)
endif
IGNORE_ISO_STANDARD = -Wno-writable-strings -Wno-missing-braces -Werror=pointer-arith -fno-strict-aliasing

pollySupported = $(shell clang polly_support_test/polly_tester.cpp -o /dev/null -mllvm -polly -mllvm -polly-parallel -lgomp -mllvm -polly-vectorizer=stripmine)
ifeq ($(.SHELLSTATUS),0)
	COMPILER_FLAGS := 	$(COMPILER_FLAGS)\
						 -mllvm -polly \
						 -mllvm -polly-parallel \
						 -mllvm -polly-vectorizer=stripmine

	LINKER_FLAGS := 	$(LINKER_FLAGS)\
						 -lgomp
endif

GDB_OPTS = 

#  ____        _ _     _
# |  _ \      (_) |   | |
# | |_) |_   _ _| | __| |
# |  _ <| | | | | |/ _` |
# | |_) | |_| | | | (_| |
# |____/ \__,_|_|_|\__,_|
#

# Linuhh how install <X>
ifeq ($(UNAME_S),Linux)
.PHONY: build run gdb clean

#?
#? Disabled the precompiled headers until they can be used consistently.
#?
build: $(OBJ_FILES) #? $(PCH_FILES)
#	@echo -e " \e[1;30m$(C_OBJ_FILES)\e[0m"
#	@echo -e " \e[1;31m$(CC_OBJ_FILES)\e[0m"
#	@echo -e " \e[1;32m$(CPP_OBJ_FILES)\e[0m"
#	@echo -e " \e[1;33m$(OBJ_FILES)\e[0m"
#	exit
	-rm -rf bin
	-mkdir bin
	clang++ -std=c++20 -o bin/$(BINARY_NAME) $(LINKER_SEARCH_DIRS) $(PRE_LINK_LIBRARIES) $(OBJ_FILES) $(INCLUDE_DIRS) $(POST_LINK_LIBRARIES) -O3 $(IGNORE_ISO_STANDARD) $(LINKER_FLAGS) $(DEFINES) -Wl,-s

libs:
	git submodule update --init --recursive
# * restclient-cpp
	-mkdir src/restclient-cpp
	cp -rf restclient-cpp/source/* src/restclient-cpp
	cp -rf restclient-cpp/include/* include
	python3 scripts/genRestclientVersion.py
# * json
	wget https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp -O include/json.hpp
# * termcolor
	wget https://raw.githubusercontent.com/ikalnytskyi/termcolor/master/include/termcolor/termcolor.hpp -O include/termcolor.hpp
# * websocketpp
	cp -rf websocketpp/websocketpp include/

run:
	./bin/$(BINARY_NAME)

test: build
	./bin/$(BINARY_NAME)

gdb: setGdbOpts $(OBJ_FILES) $(PCH_FILES)
	-rm -rf bin
	-mkdir bin
	clang++ -std=c++20 -o bin/$(BINARY_NAME) $(LINKER_SEARCH_DIRS) $(PRE_LINK_LIBRARIES) $(OBJ_FILES) $(INCLUDE_DIRS) $(POST_LINK_LIBRARIES) -O3 -Weverything $(IGNORE_ISO_STANDARD) $(LINKER_FLAGS) $(DEFINES) -g
	gdb -ex run bin/$(BINARY_NAME)

setGdbOpts:
	$(eval GDB_OPTS := -g)

$(S_OBJ_FILES): %.o: %.s
	clang -c -o $@ $< $(INCLUDE_DIRS) -O3 $(IGNORE_ISO_STANDARD) -fPIC $(COMPILER_FLAGS) $(GDB_OPTS) $(DEFINES)
$(C_OBJ_FILES): %.o: %.c
	clang -std=c99 -c -o $@ $< $(INCLUDE_DIRS) -O3 $(IGNORE_ISO_STANDARD) -fPIC $(COMPILER_FLAGS) $(GDB_OPTS) $(DEFINES)
$(CC_OBJ_FILES): %.o: %.cc
	clang++ -std=c++20 -c -o $@ $< $(INCLUDE_DIRS) -O3 $(IGNORE_ISO_STANDARD) -fPIC $(COMPILER_FLAGS) $(GDB_OPTS) $(DEFINES)
$(CPP_OBJ_FILES): %.o: %.cpp
	clang++ -std=c++20 -c -o $@ $< $(INCLUDE_DIRS) -O3 $(IGNORE_ISO_STANDARD) -fPIC $(COMPILER_FLAGS) $(GDB_OPTS) $(DEFINES)

clean:
	rm -rf bin
	mkdir bin
	find . -type f -name '*.o' -delete & exit

genmake:
	python3 scripts/genmake.py

modules:
	git submodule update --init --recursive

endif

# MacOShit
ifeq ($(UNAME_S),Darwin)
mac_genmake:
	python3 scripts/genmake.py
endif

# Windex
ifeq ($(OS),Windows_NT)
#default:
#	@echo "Unsupported operating system due to:"
#	@echo "  \"fuck that dll hell\""
#	@echo "  - Winter every time we use windows"

win_build: $(OBJ_FILES)
	-cmd /c rmdir /s /q bin
	-mkdir bin
	clang++ -std=c++20 -o bin/$(BINARY_NAME) $(LINKER_SEARCH_DIRS) $(PRE_LINK_LIBRARIES) $(OBJ_FILES) $(INCLUDE_DIRS) $(POST_LINK_LIBRARIES) -O3 $(IGNORE_ISO_STANDARD) $(LINKER_FLAGS) $(DEFINES)  -fuse-ld=lld-link

win_test: win_build
	bin\$(BINARY_NAME)

win_clean:
#objects = $(shell cmd /c dir /A-D-S-H-L /b /S *.o)
#@echo objects
#$(foreach object,$(objects),$(shell del $(object)))
	-@scripts\win_cleanobjects.bat
	-@cmd /c rmdir /s /q bin
	-@mkdir bin

$(S_OBJ_FILES): %.o: %.s
	clang -c -o $@ $< $(INCLUDE_DIRS) -O3 $(IGNORE_ISO_STANDARD) $(COMPILER_FLAGS) $(GDB_OPTS) $(DEFINES)
$(C_OBJ_FILES): %.o: %.c
	clang -std=c99 -c -o $@ $< $(INCLUDE_DIRS) -O3 $(IGNORE_ISO_STANDARD) $(COMPILER_FLAGS) $(GDB_OPTS) $(DEFINES)
$(CC_OBJ_FILES): %.o: %.cc
	clang++ -std=c++20 -c -o $@ $< $(INCLUDE_DIRS) -O3 $(IGNORE_ISO_STANDARD) $(COMPILER_FLAGS) $(GDB_OPTS) $(DEFINES)
$(CPP_OBJ_FILES): %.o: %.cpp
	clang++ -std=c++20 -c -o $@ $< $(INCLUDE_DIRS) -O3 $(IGNORE_ISO_STANDARD) $(COMPILER_FLAGS) $(GDB_OPTS) $(DEFINES)

win_genmake:
	python scripts/genmake.py
endif
